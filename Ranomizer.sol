pragma solidity 0.6.10;

import "./VRFConsumerBase.sol";

contract Randomizer is VRFConsumerBase {
    
    bytes32 internal keyHash;
    uint256 internal fee;

    // if only one user at a time you can just set the number 
    uint256 public randomResult;

    // if multiple users on dApp, you'll need mapping to track
    mapping (bytes32 => uint256) randomNumberByRequestId;

    /**
     * Constructor inherits VRFConsumerBase
     * 
     * Network: Kovan
     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9
     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088
     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4
     * 
     * @Dev to run this you'll need test LINK from LINK Faucet and send it to the 
     * contract that's running the randomness request
     */
    constructor() VRFConsumerBase(
            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator
            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token
        ) public {
            keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;
            fee = 0.1 * 10 ** 18; // 0.1 LINK (varies by network)
    }

    // get randome number by providing a any number into the function and it returns id
    // this number can be generated by a computer
    function getRandomNumber(uint256 userProvidedSeed) public returns(bytes32 requestId){
        // verify that this contract has suffifient LINK to run
        require(LINK.balanceOf(address(this)) > fee, "Insufficient LINK funds.");
        // return random number
        return requestRandomness(keyHash, fee, userProvidedSeed);
    }

    // eternal function for the oracle to basically return the number
    function fulfillRandomness(bytes32 requestId, uint256 randomNumber) external {
        randomResult = randomNumber;
        randomNumber = randomNumberByUser[requestId];
    }

}